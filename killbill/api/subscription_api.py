# coding: utf-8

#
# Copyright 2014-2017 Groupon, Inc.
# Copyright 2014-2017 The Billing Project, LLC
#
# The Billing Project, LLC licenses this file to you under the Apache License, version 2.0
# (the "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at:
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 0.20.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from killbill.api_client import ApiClient


class SubscriptionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_subscription_blocking_state(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Block a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_subscription_blocking_state(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param BlockingState body: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: List[BlockingState]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_subscription_blocking_state_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.add_subscription_blocking_state_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def add_subscription_blocking_state_with_http_info(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Block a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_subscription_blocking_state_with_http_info(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param BlockingState body: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: List[BlockingState]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'body', 'created_by', 'requested_date', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_subscription_blocking_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `add_subscription_blocking_state`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_subscription_blocking_state`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `add_subscription_blocking_state`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `add_subscription_blocking_state`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/block', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[BlockingState]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_subscription_plan(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Cancel an entitlement plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_subscription_plan(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param Str entitlement_policy:
        :param Str billing_policy:
        :param Bool use_requested_date_for_billing:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cancel_subscription_plan_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_subscription_plan_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
            return data

    def cancel_subscription_plan_with_http_info(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Cancel an entitlement plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_subscription_plan_with_http_info(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param Str entitlement_policy:
        :param Str billing_policy:
        :param Bool use_requested_date_for_billing:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'created_by', 'requested_date', 'call_completion', 'call_timeout_sec', 'entitlement_policy', 'billing_policy', 'use_requested_date_for_billing', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_subscription_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `cancel_subscription_plan`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `cancel_subscription_plan`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `cancel_subscription_plan`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501
        if 'call_completion' in params:
            query_params.append(('callCompletion', params['call_completion']))  # noqa: E501
        if 'call_timeout_sec' in params:
            query_params.append(('callTimeoutSec', params['call_timeout_sec']))  # noqa: E501
        if 'entitlement_policy' in params:
            query_params.append(('entitlementPolicy', params['entitlement_policy']))  # noqa: E501
        if 'billing_policy' in params:
            query_params.append(('billingPolicy', params['billing_policy']))  # noqa: E501
        if 'use_requested_date_for_billing' in params:
            query_params.append(('useRequestedDateForBilling', params['use_requested_date_for_billing']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_subscription_plan(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Change entitlement plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_subscription_plan(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Subscription body: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param Str billing_policy:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_subscription_plan_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.change_subscription_plan_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def change_subscription_plan_with_http_info(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Change entitlement plan  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_subscription_plan_with_http_info(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Subscription body: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param Str billing_policy:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'body', 'created_by', 'requested_date', 'call_completion', 'call_timeout_sec', 'billing_policy', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_subscription_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `change_subscription_plan`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_subscription_plan`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `change_subscription_plan`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `change_subscription_plan`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501
        if 'call_completion' in params:
            query_params.append(('callCompletion', params['call_completion']))  # noqa: E501
        if 'call_timeout_sec' in params:
            query_params.append(('callTimeoutSec', params['call_timeout_sec']))  # noqa: E501
        if 'billing_policy' in params:
            query_params.append(('billingPolicy', params['billing_policy']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscription(self, body=None, created_by=None, **kwargs):  # noqa: E501
        """Create an subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription(body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Subscription body: (required)
        :param Str created_by: (required)
        :param Date entitlement_date:
        :param Date billing_date:
        :param Bool rename_key_if_exists_and_unused:
        :param Bool migrated:
        :param Int bcd:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_subscription_with_http_info(body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_with_http_info(body, created_by, **kwargs)  # noqa: E501
            return data

    def create_subscription_with_http_info(self, body=None, created_by=None, **kwargs):  # noqa: E501
        """Create an subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription_with_http_info(body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Subscription body: (required)
        :param Str created_by: (required)
        :param Date entitlement_date:
        :param Date billing_date:
        :param Bool rename_key_if_exists_and_unused:
        :param Bool migrated:
        :param Int bcd:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'created_by', 'entitlement_date', 'billing_date', 'rename_key_if_exists_and_unused', 'migrated', 'bcd', 'call_completion', 'call_timeout_sec', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_subscription`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `create_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entitlement_date' in params:
            query_params.append(('entitlementDate', params['entitlement_date']))  # noqa: E501
        if 'billing_date' in params:
            query_params.append(('billingDate', params['billing_date']))  # noqa: E501
        if 'rename_key_if_exists_and_unused' in params:
            query_params.append(('renameKeyIfExistsAndUnused', params['rename_key_if_exists_and_unused']))  # noqa: E501
        if 'migrated' in params:
            query_params.append(('migrated', params['migrated']))  # noqa: E501
        if 'bcd' in params:
            query_params.append(('bcd', params['bcd']))  # noqa: E501
        if 'call_completion' in params:
            query_params.append(('callCompletion', params['call_completion']))  # noqa: E501
        if 'call_timeout_sec' in params:
            query_params.append(('callTimeoutSec', params['call_timeout_sec']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscription_custom_fields(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Add custom fields to subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription_custom_fields(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param List[CustomField] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_subscription_custom_fields_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_custom_fields_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def create_subscription_custom_fields_with_http_info(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Add custom fields to subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription_custom_fields_with_http_info(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param List[CustomField] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'body', 'created_by', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `create_subscription_custom_fields`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_subscription_custom_fields`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `create_subscription_custom_fields`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `create_subscription_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/customFields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscription_tags(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """create_subscription_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription_tags(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param List[Str] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_subscription_tags_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_tags_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def create_subscription_tags_with_http_info(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """create_subscription_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription_tags_with_http_info(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param List[Str] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'body', 'created_by', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `create_subscription_tags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_subscription_tags`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `create_subscription_tags`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `create_subscription_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscription_with_add_ons(self, body=None, created_by=None, **kwargs):  # noqa: E501
        """Create an entitlement with addOn products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription_with_add_ons(body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param List[Subscription] body: (required)
        :param Str created_by: (required)
        :param Date entitlement_date:
        :param Date billing_date:
        :param Bool migrated:
        :param Bool rename_key_if_exists_and_unused:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: Bundle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_subscription_with_add_ons_with_http_info(body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_with_add_ons_with_http_info(body, created_by, **kwargs)  # noqa: E501
            return data

    def create_subscription_with_add_ons_with_http_info(self, body=None, created_by=None, **kwargs):  # noqa: E501
        """Create an entitlement with addOn products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription_with_add_ons_with_http_info(body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param List[Subscription] body: (required)
        :param Str created_by: (required)
        :param Date entitlement_date:
        :param Date billing_date:
        :param Bool migrated:
        :param Bool rename_key_if_exists_and_unused:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: Bundle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'created_by', 'entitlement_date', 'billing_date', 'migrated', 'rename_key_if_exists_and_unused', 'call_completion', 'call_timeout_sec', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription_with_add_ons" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_subscription_with_add_ons`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `create_subscription_with_add_ons`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entitlement_date' in params:
            query_params.append(('entitlementDate', params['entitlement_date']))  # noqa: E501
        if 'billing_date' in params:
            query_params.append(('billingDate', params['billing_date']))  # noqa: E501
        if 'migrated' in params:
            query_params.append(('migrated', params['migrated']))  # noqa: E501
        if 'rename_key_if_exists_and_unused' in params:
            query_params.append(('renameKeyIfExistsAndUnused', params['rename_key_if_exists_and_unused']))  # noqa: E501
        if 'call_completion' in params:
            query_params.append(('callCompletion', params['call_completion']))  # noqa: E501
        if 'call_timeout_sec' in params:
            query_params.append(('callTimeoutSec', params['call_timeout_sec']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/createSubscriptionWithAddOns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bundle',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscriptions_with_add_ons(self, body=None, created_by=None, **kwargs):  # noqa: E501
        """Create multiple entitlements with addOn products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscriptions_with_add_ons(body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param List[BulkSubscriptionsBundle] body: (required)
        :param Str created_by: (required)
        :param Date entitlement_date:
        :param Date billing_date:
        :param Bool rename_key_if_exists_and_unused:
        :param Bool migrated:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: List[Bundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_subscriptions_with_add_ons_with_http_info(body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscriptions_with_add_ons_with_http_info(body, created_by, **kwargs)  # noqa: E501
            return data

    def create_subscriptions_with_add_ons_with_http_info(self, body=None, created_by=None, **kwargs):  # noqa: E501
        """Create multiple entitlements with addOn products  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscriptions_with_add_ons_with_http_info(body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param List[BulkSubscriptionsBundle] body: (required)
        :param Str created_by: (required)
        :param Date entitlement_date:
        :param Date billing_date:
        :param Bool rename_key_if_exists_and_unused:
        :param Bool migrated:
        :param Bool call_completion:
        :param Int call_timeout_sec:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: List[Bundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'created_by', 'entitlement_date', 'billing_date', 'rename_key_if_exists_and_unused', 'migrated', 'call_completion', 'call_timeout_sec', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscriptions_with_add_ons" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_subscriptions_with_add_ons`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `create_subscriptions_with_add_ons`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entitlement_date' in params:
            query_params.append(('entitlementDate', params['entitlement_date']))  # noqa: E501
        if 'billing_date' in params:
            query_params.append(('billingDate', params['billing_date']))  # noqa: E501
        if 'rename_key_if_exists_and_unused' in params:
            query_params.append(('renameKeyIfExistsAndUnused', params['rename_key_if_exists_and_unused']))  # noqa: E501
        if 'migrated' in params:
            query_params.append(('migrated', params['migrated']))  # noqa: E501
        if 'call_completion' in params:
            query_params.append(('callCompletion', params['call_completion']))  # noqa: E501
        if 'call_timeout_sec' in params:
            query_params.append(('callTimeoutSec', params['call_timeout_sec']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/createSubscriptionsWithAddOns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[Bundle]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subscription_custom_fields(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Remove custom fields from subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_subscription_custom_fields(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param List[Str] custom_field:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_subscription_custom_fields_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subscription_custom_fields_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
            return data

    def delete_subscription_custom_fields_with_http_info(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Remove custom fields from subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_subscription_custom_fields_with_http_info(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param List[Str] custom_field:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'created_by', 'custom_field', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subscription_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `delete_subscription_custom_fields`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `delete_subscription_custom_fields`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `delete_subscription_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'custom_field' in params:
            query_params.append(('customField', params['custom_field']))  # noqa: E501
            collection_formats['customField'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/customFields', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subscription_tags(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Remove tags from subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_subscription_tags(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param List[Str] tag_def:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_subscription_tags_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subscription_tags_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
            return data

    def delete_subscription_tags_with_http_info(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Remove tags from subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_subscription_tags_with_http_info(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param List[Str] tag_def:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'created_by', 'tag_def', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subscription_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `delete_subscription_tags`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `delete_subscription_tags`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `delete_subscription_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'tag_def' in params:
            query_params.append(('tagDef', params['tag_def']))  # noqa: E501
            collection_formats['tagDef'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/tags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscription(self, subscription_id=None, **kwargs):  # noqa: E501
        """Retrieve a subscription by id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subscription(subscription_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str audit:
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_subscription_with_http_info(subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subscription_with_http_info(subscription_id, **kwargs)  # noqa: E501
            return data

    def get_subscription_with_http_info(self, subscription_id=None, **kwargs):  # noqa: E501
        """Retrieve a subscription by id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subscription_with_http_info(subscription_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str audit:
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_subscription`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `get_subscription`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscription_custom_fields(self, subscription_id=None, **kwargs):  # noqa: E501
        """Retrieve subscription custom fields  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subscription_custom_fields(subscription_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str audit:
        :return: List[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_subscription_custom_fields_with_http_info(subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subscription_custom_fields_with_http_info(subscription_id, **kwargs)  # noqa: E501
            return data

    def get_subscription_custom_fields_with_http_info(self, subscription_id=None, **kwargs):  # noqa: E501
        """Retrieve subscription custom fields  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subscription_custom_fields_with_http_info(subscription_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str audit:
        :return: List[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_subscription_custom_fields`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `get_subscription_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/customFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[CustomField]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscription_tags(self, subscription_id=None, **kwargs):  # noqa: E501
        """Retrieve subscription tags  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subscription_tags(subscription_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Bool included_deleted:
        :param Str audit:
        :return: List[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_subscription_tags_with_http_info(subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subscription_tags_with_http_info(subscription_id, **kwargs)  # noqa: E501
            return data

    def get_subscription_tags_with_http_info(self, subscription_id=None, **kwargs):  # noqa: E501
        """Retrieve subscription tags  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subscription_tags_with_http_info(subscription_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Bool included_deleted:
        :param Str audit:
        :return: List[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'included_deleted', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_subscription_tags`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `get_subscription_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'included_deleted' in params:
            query_params.append(('includedDeleted', params['included_deleted']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[Tag]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_subscription_custom_fields(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Modify custom fields to subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_subscription_custom_fields(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param List[CustomField] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_subscription_custom_fields_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_subscription_custom_fields_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def modify_subscription_custom_fields_with_http_info(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Modify custom fields to subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_subscription_custom_fields_with_http_info(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param List[CustomField] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'body', 'created_by', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_subscription_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `modify_subscription_custom_fields`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_subscription_custom_fields`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `modify_subscription_custom_fields`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `modify_subscription_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/customFields', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def uncancel_subscription_plan(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Un-cancel an entitlement  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.uncancel_subscription_plan(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.uncancel_subscription_plan_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.uncancel_subscription_plan_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
            return data

    def uncancel_subscription_plan_with_http_info(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Un-cancel an entitlement  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.uncancel_subscription_plan_with_http_info(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'created_by', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method uncancel_subscription_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `uncancel_subscription_plan`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `uncancel_subscription_plan`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `uncancel_subscription_plan`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/uncancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def undo_change_subscription_plan(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Undo a pending change plan on an entitlement  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.undo_change_subscription_plan(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.undo_change_subscription_plan_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.undo_change_subscription_plan_with_http_info(subscription_id, created_by, **kwargs)  # noqa: E501
            return data

    def undo_change_subscription_plan_with_http_info(self, subscription_id=None, created_by=None, **kwargs):  # noqa: E501
        """Undo a pending change plan on an entitlement  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.undo_change_subscription_plan_with_http_info(subscription_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Str created_by: (required)
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'created_by', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method undo_change_subscription_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `undo_change_subscription_plan`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `undo_change_subscription_plan`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `undo_change_subscription_plan`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/undoChangePlan', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_subscription_bcd(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Update the BCD associated to a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_subscription_bcd(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Subscription body: (required)
        :param Str created_by: (required)
        :param Date effective_from_date:
        :param Bool force_new_bcd_with_past_effective_date:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_subscription_bcd_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.update_subscription_bcd_with_http_info(subscription_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def update_subscription_bcd_with_http_info(self, subscription_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Update the BCD associated to a subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_subscription_bcd_with_http_info(subscription_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str subscription_id: (required)
        :param Subscription body: (required)
        :param Str created_by: (required)
        :param Date effective_from_date:
        :param Bool force_new_bcd_with_past_effective_date:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'body', 'created_by', 'effective_from_date', 'force_new_bcd_with_past_effective_date', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_subscription_bcd" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `update_subscription_bcd`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_subscription_bcd`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `update_subscription_bcd`")  # noqa: E501

        if 'subscription_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['subscription_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `subscription_id` when calling `update_subscription_bcd`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []
        if 'effective_from_date' in params:
            query_params.append(('effectiveFromDate', params['effective_from_date']))  # noqa: E501
        if 'force_new_bcd_with_past_effective_date' in params:
            query_params.append(('forceNewBcdWithPastEffectiveDate', params['force_new_bcd_with_past_effective_date']))  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/subscriptions/{subscriptionId}/bcd', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
