# coding: utf-8

#
# Copyright 2014-2017 Groupon, Inc.
# Copyright 2014-2017 The Billing Project, LLC
#
# The Billing Project, LLC licenses this file to you under the Apache License, version 2.0
# (the "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at:
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform  # noqa: E501

    OpenAPI spec version: 0.20.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from killbill.api_client import ApiClient


class BundleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_bundle_blocking_state(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Block a bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_bundle_blocking_state(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param BlockingState body: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: List[BlockingState]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_bundle_blocking_state_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.add_bundle_blocking_state_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def add_bundle_blocking_state_with_http_info(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Block a bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_bundle_blocking_state_with_http_info(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param BlockingState body: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: List[BlockingState]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'body', 'created_by', 'requested_date', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_bundle_blocking_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `add_bundle_blocking_state`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_bundle_blocking_state`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `add_bundle_blocking_state`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `add_bundle_blocking_state`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/block', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[BlockingState]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bundle_custom_fields(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Add custom fields to bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bundle_custom_fields(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param List[CustomField] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: List[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_bundle_custom_fields_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bundle_custom_fields_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def create_bundle_custom_fields_with_http_info(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Add custom fields to bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bundle_custom_fields_with_http_info(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param List[CustomField] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: List[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'body', 'created_by', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bundle_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `create_bundle_custom_fields`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_bundle_custom_fields`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `create_bundle_custom_fields`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `create_bundle_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/customFields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[CustomField]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bundle_tags(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Add tags to bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bundle_tags(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param List[Str] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: List[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_bundle_tags_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bundle_tags_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def create_bundle_tags_with_http_info(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Add tags to bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_bundle_tags_with_http_info(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param List[Str] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: List[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'body', 'created_by', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bundle_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `create_bundle_tags`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_bundle_tags`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `create_bundle_tags`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `create_bundle_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[Tag]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_bundle_custom_fields(self, bundle_id=None, created_by=None, **kwargs):  # noqa: E501
        """Remove custom fields from bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bundle_custom_fields(bundle_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str created_by: (required)
        :param List[Str] custom_field:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_bundle_custom_fields_with_http_info(bundle_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_bundle_custom_fields_with_http_info(bundle_id, created_by, **kwargs)  # noqa: E501
            return data

    def delete_bundle_custom_fields_with_http_info(self, bundle_id=None, created_by=None, **kwargs):  # noqa: E501
        """Remove custom fields from bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bundle_custom_fields_with_http_info(bundle_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str created_by: (required)
        :param List[Str] custom_field:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'created_by', 'custom_field', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bundle_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `delete_bundle_custom_fields`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `delete_bundle_custom_fields`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `delete_bundle_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'custom_field' in params:
            query_params.append(('customField', params['custom_field']))  # noqa: E501
            collection_formats['customField'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/customFields', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_bundle_tags(self, bundle_id=None, created_by=None, **kwargs):  # noqa: E501
        """Remove tags from bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bundle_tags(bundle_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str created_by: (required)
        :param List[Str] tag_def:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_bundle_tags_with_http_info(bundle_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_bundle_tags_with_http_info(bundle_id, created_by, **kwargs)  # noqa: E501
            return data

    def delete_bundle_tags_with_http_info(self, bundle_id=None, created_by=None, **kwargs):  # noqa: E501
        """Remove tags from bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_bundle_tags_with_http_info(bundle_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str created_by: (required)
        :param List[Str] tag_def:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'created_by', 'tag_def', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bundle_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `delete_bundle_tags`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `delete_bundle_tags`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `delete_bundle_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'tag_def' in params:
            query_params.append(('tagDef', params['tag_def']))  # noqa: E501
            collection_formats['tagDef'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/tags', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle(self, bundle_id=None, **kwargs):  # noqa: E501
        """Retrieve a bundle by id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle(bundle_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str audit:
        :return: Bundle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bundle_with_http_info(bundle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_with_http_info(bundle_id, **kwargs)  # noqa: E501
            return data

    def get_bundle_with_http_info(self, bundle_id=None, **kwargs):  # noqa: E501
        """Retrieve a bundle by id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_with_http_info(bundle_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str audit:
        :return: Bundle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `get_bundle`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bundle',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle_by_key(self, external_key=None, **kwargs):  # noqa: E501
        """Retrieve a bundle by external key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_by_key(external_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str external_key: (required)
        :param Bool included_deleted:
        :param Str audit:
        :return: List[Bundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bundle_by_key_with_http_info(external_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_by_key_with_http_info(external_key, **kwargs)  # noqa: E501
            return data

    def get_bundle_by_key_with_http_info(self, external_key=None, **kwargs):  # noqa: E501
        """Retrieve a bundle by external key  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_by_key_with_http_info(external_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str external_key: (required)
        :param Bool included_deleted:
        :param Str audit:
        :return: List[Bundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_key', 'included_deleted', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_by_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_key' is set
        if ('external_key' not in params or
                params['external_key'] is None):
            raise ValueError("Missing the required parameter `external_key` when calling `get_bundle_by_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'external_key' in params:
            query_params.append(('externalKey', params['external_key']))  # noqa: E501
        if 'included_deleted' in params:
            query_params.append(('includedDeleted', params['included_deleted']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[Bundle]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle_custom_fields(self, bundle_id=None, **kwargs):  # noqa: E501
        """Retrieve bundle custom fields  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_custom_fields(bundle_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str audit:
        :return: List[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bundle_custom_fields_with_http_info(bundle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_custom_fields_with_http_info(bundle_id, **kwargs)  # noqa: E501
            return data

    def get_bundle_custom_fields_with_http_info(self, bundle_id=None, **kwargs):  # noqa: E501
        """Retrieve bundle custom fields  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_custom_fields_with_http_info(bundle_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str audit:
        :return: List[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_custom_fields`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `get_bundle_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/customFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[CustomField]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle_tags(self, bundle_id=None, **kwargs):  # noqa: E501
        """Retrieve bundle tags  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_tags(bundle_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Bool included_deleted:
        :param Str audit:
        :return: List[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bundle_tags_with_http_info(bundle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_tags_with_http_info(bundle_id, **kwargs)  # noqa: E501
            return data

    def get_bundle_tags_with_http_info(self, bundle_id=None, **kwargs):  # noqa: E501
        """Retrieve bundle tags  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_tags_with_http_info(bundle_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Bool included_deleted:
        :param Str audit:
        :return: List[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'included_deleted', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_tags`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `get_bundle_tags`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'included_deleted' in params:
            query_params.append(('includedDeleted', params['included_deleted']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[Tag]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundles(self, **kwargs):  # noqa: E501
        """List bundles  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundles(async=True)
        >>> result = thread.get()

        :param async bool
        :param Int offset:
        :param Int limit:
        :param Str audit:
        :return: List[Bundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bundles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_bundles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_bundles_with_http_info(self, **kwargs):  # noqa: E501
        """List bundles  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundles_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Int offset:
        :param Int limit:
        :param Str audit:
        :return: List[Bundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/pagination', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[Bundle]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_bundle_custom_fields(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Modify custom fields to bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_bundle_custom_fields(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param List[CustomField] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_bundle_custom_fields_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_bundle_custom_fields_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def modify_bundle_custom_fields_with_http_info(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Modify custom fields to bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_bundle_custom_fields_with_http_info(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param List[CustomField] body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'body', 'created_by', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_bundle_custom_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `modify_bundle_custom_fields`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_bundle_custom_fields`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `modify_bundle_custom_fields`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `modify_bundle_custom_fields`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/customFields', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause_bundle(self, bundle_id=None, created_by=None, **kwargs):  # noqa: E501
        """Pause a bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.pause_bundle(bundle_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.pause_bundle_with_http_info(bundle_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.pause_bundle_with_http_info(bundle_id, created_by, **kwargs)  # noqa: E501
            return data

    def pause_bundle_with_http_info(self, bundle_id=None, created_by=None, **kwargs):  # noqa: E501
        """Pause a bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.pause_bundle_with_http_info(bundle_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'created_by', 'requested_date', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `pause_bundle`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `pause_bundle`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `pause_bundle`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/pause', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_external_key(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Update a bundle externalKey  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rename_external_key(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Bundle body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rename_external_key_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_external_key_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def rename_external_key_with_http_info(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Update a bundle externalKey  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rename_external_key_with_http_info(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Bundle body: (required)
        :param Str created_by: (required)
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'body', 'created_by', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_external_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `rename_external_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rename_external_key`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `rename_external_key`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `rename_external_key`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/renameKey', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_bundle(self, bundle_id=None, created_by=None, **kwargs):  # noqa: E501
        """Resume a bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resume_bundle(bundle_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resume_bundle_with_http_info(bundle_id, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_bundle_with_http_info(bundle_id, created_by, **kwargs)  # noqa: E501
            return data

    def resume_bundle_with_http_info(self, bundle_id=None, created_by=None, **kwargs):  # noqa: E501
        """Resume a bundle  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resume_bundle_with_http_info(bundle_id, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'created_by', 'requested_date', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `resume_bundle`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `resume_bundle`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `resume_bundle`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}/resume', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_bundles(self, search_key=None, **kwargs):  # noqa: E501
        """Search bundles  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_bundles(search_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str search_key: (required)
        :param Int offset:
        :param Int limit:
        :param Str audit:
        :return: List[Bundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_bundles_with_http_info(search_key, **kwargs)  # noqa: E501
        else:
            (data) = self.search_bundles_with_http_info(search_key, **kwargs)  # noqa: E501
            return data

    def search_bundles_with_http_info(self, search_key=None, **kwargs):  # noqa: E501
        """Search bundles  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_bundles_with_http_info(search_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str search_key: (required)
        :param Int offset:
        :param Int limit:
        :param Str audit:
        :return: List[Bundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_key', 'offset', 'limit', 'audit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_bundles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_key' is set
        if ('search_key' not in params or
                params['search_key'] is None):
            raise ValueError("Missing the required parameter `search_key` when calling `search_bundles`")  # noqa: E501

        if 'search_key' in params and not re.search('.*', params['search_key']):  # noqa: E501
            raise ValueError("Invalid value for parameter `search_key` when calling `search_bundles`, must conform to the pattern `/.*/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'search_key' in params:
            path_params['searchKey'] = params['search_key']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'audit' in params:
            query_params.append(('audit', params['audit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/search/{searchKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='List[Bundle]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_bundle(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Transfer a bundle to another account  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transfer_bundle(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Bundle body: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param Str billing_policy:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: Bundle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.transfer_bundle_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_bundle_with_http_info(bundle_id, body, created_by, **kwargs)  # noqa: E501
            return data

    def transfer_bundle_with_http_info(self, bundle_id=None, body=None, created_by=None, **kwargs):  # noqa: E501
        """Transfer a bundle to another account  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transfer_bundle_with_http_info(bundle_id, body, created_by, async=True)
        >>> result = thread.get()

        :param async bool
        :param Str bundle_id: (required)
        :param Bundle body: (required)
        :param Str created_by: (required)
        :param Date requested_date:
        :param Str billing_policy:
        :param List[Str] plugin_property:
        :param Str reason:
        :param Str comment:
        :return: Bundle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'body', 'created_by', 'requested_date', 'billing_policy', 'plugin_property', 'reason', 'comment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `transfer_bundle`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `transfer_bundle`")  # noqa: E501
        # verify the required parameter 'created_by' is set
        if ('created_by' not in params or
                params['created_by'] is None):
            raise ValueError("Missing the required parameter `created_by` when calling `transfer_bundle`")  # noqa: E501

        if 'bundle_id' in params and not re.search('\\w+-\\w+-\\w+-\\w+-\\w+', params['bundle_id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `bundle_id` when calling `transfer_bundle`, must conform to the pattern `/\\w+-\\w+-\\w+-\\w+-\\w+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'requested_date' in params:
            query_params.append(('requestedDate', params['requested_date']))  # noqa: E501
        if 'billing_policy' in params:
            query_params.append(('billingPolicy', params['billing_policy']))  # noqa: E501
        if 'plugin_property' in params:
            query_params.append(('pluginProperty', params['plugin_property']))  # noqa: E501
            collection_formats['pluginProperty'] = 'multi'  # noqa: E501

        header_params = {}
        if 'created_by' in params:
            header_params['X-Killbill-CreatedBy'] = params['created_by']  # noqa: E501
        if 'reason' in params:
            header_params['X-Killbill-Reason'] = params['reason']  # noqa: E501
        if 'comment' in params:
            header_params['X-Killbill-Comment'] = params['comment']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Killbill Api Key', 'Killbill Api Secret', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/1.0/kb/bundles/{bundleId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bundle',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
